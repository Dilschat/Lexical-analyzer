private Token processOperator() throws Exception {
        if("=!+-*/%&^|".contains(currentChar.toString())){ // simple operations without  < >
            previousCharacters = currentChar.toString();
            readNextChar();
            if (currentChar.equals('=')){ // с присвоением ну или ==
                previousCharacters = previousCharacters + currentChar.toString();
                readNextChar();
                readCharsTillValuableChar();
                return new Token(previousCharacters, Token.OPERATOR);
            } else{ // без присвоения
                readNextChar();
                readCharsTillValuableChar();
                return new Token(previousCharacters, Token.OPERATOR);
            }
        }


        else if("<".contains(currentChar.toString())){ // processing < <= <<= <<
            previousCharacters = currentChar.toString();
            readNextChar();
            if (currentChar.equals('=')){ // <=
                previousCharacters = previousCharacters + currentChar.toString();
                readNextChar();
                readCharsTillValuableChar();
                return new Token(previousCharacters, Token.OPERATOR);
            } else if(currentChar.equals('<')){ // <<= or <<
                previousCharacters = previousCharacters + currentChar.toString();
                readNextChar();
                if (currentChar.equals('=')){ // <<=
                    previousCharacters = previousCharacters + currentChar.toString();
                    readNextChar();
                    readCharsTillValuableChar();
                    return new Token(previousCharacters, Token.OPERATOR);
                } else { // <<
                    readCharsTillValuableChar();
                    return new Token(previousCharacters, Token.OPERATOR);
                }
            } else { // <
                readNextChar();
                readCharsTillValuableChar();
                return new Token(previousCharacters, Token.OPERATOR);
            }
        }

        else if(">".contains(currentChar.toString())){ // processing > >= >> >>= >>>
            previousCharacters = currentChar.toString();
            readNextChar();
            if (currentChar.equals('=')){ // >=
                previousCharacters = previousCharacters + currentChar.toString();
                readNextChar();
                readCharsTillValuableChar();
                return new Token(previousCharacters, Token.OPERATOR);
            } else if(currentChar.equals('>')){// >> >>> >>=
                previousCharacters = previousCharacters + currentChar.toString();
                readNextChar();
                if(currentChar.equals('>')){ // >>>
                    previousCharacters = previousCharacters + currentChar.toString();
                    readNextChar();
                    readCharsTillValuableChar();
                    return new Token(previousCharacters, Token.OPERATOR);
                }else if(currentChar.equals('=')) { // >>=
                    previousCharacters = previousCharacters + currentChar.toString();
                    readNextChar();
                    readCharsTillValuableChar();
                    return new Token(previousCharacters, Token.OPERATOR);
                } else { // >>
                    readCharsTillValuableChar();
                    return new Token(previousCharacters, Token.OPERATOR);
                }
            } else { // >
                readNextChar();
                readCharsTillValuableChar();
                return new Token(previousCharacters, Token.OPERATOR);
            }
        }

        else if(currentChar.equals('~')){ // processing ~
            readNextChar();
            readCharsTillValuableChar();
            return new Token(previousCharacters, Token.OPERATOR);
        }

        else{
            throw new Exception("kakayoto hyinya");
        }
    }